// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/BradHacker/Br4vo6ix/ent/heartbeat"
	"github.com/BradHacker/Br4vo6ix/ent/implant"
	"github.com/BradHacker/Br4vo6ix/ent/predicate"
	"github.com/BradHacker/Br4vo6ix/ent/task"
)

// ImplantUpdate is the builder for updating Implant entities.
type ImplantUpdate struct {
	config
	hooks    []Hook
	mutation *ImplantMutation
}

// Where appends a list predicates to the ImplantUpdate builder.
func (iu *ImplantUpdate) Where(ps ...predicate.Implant) *ImplantUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUUID sets the "uuid" field.
func (iu *ImplantUpdate) SetUUID(s string) *ImplantUpdate {
	iu.mutation.SetUUID(s)
	return iu
}

// SetMachineID sets the "machine_id" field.
func (iu *ImplantUpdate) SetMachineID(s string) *ImplantUpdate {
	iu.mutation.SetMachineID(s)
	return iu
}

// SetHostname sets the "hostname" field.
func (iu *ImplantUpdate) SetHostname(s string) *ImplantUpdate {
	iu.mutation.SetHostname(s)
	return iu
}

// SetIP sets the "ip" field.
func (iu *ImplantUpdate) SetIP(s string) *ImplantUpdate {
	iu.mutation.SetIP(s)
	return iu
}

// SetLastSeenAt sets the "last_seen_at" field.
func (iu *ImplantUpdate) SetLastSeenAt(t time.Time) *ImplantUpdate {
	iu.mutation.SetLastSeenAt(t)
	return iu
}

// SetNillableLastSeenAt sets the "last_seen_at" field if the given value is not nil.
func (iu *ImplantUpdate) SetNillableLastSeenAt(t *time.Time) *ImplantUpdate {
	if t != nil {
		iu.SetLastSeenAt(*t)
	}
	return iu
}

// AddHeartbeatIDs adds the "heartbeats" edge to the Heartbeat entity by IDs.
func (iu *ImplantUpdate) AddHeartbeatIDs(ids ...int) *ImplantUpdate {
	iu.mutation.AddHeartbeatIDs(ids...)
	return iu
}

// AddHeartbeats adds the "heartbeats" edges to the Heartbeat entity.
func (iu *ImplantUpdate) AddHeartbeats(h ...*Heartbeat) *ImplantUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return iu.AddHeartbeatIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (iu *ImplantUpdate) AddTaskIDs(ids ...int) *ImplantUpdate {
	iu.mutation.AddTaskIDs(ids...)
	return iu
}

// AddTasks adds the "tasks" edges to the Task entity.
func (iu *ImplantUpdate) AddTasks(t ...*Task) *ImplantUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iu.AddTaskIDs(ids...)
}

// Mutation returns the ImplantMutation object of the builder.
func (iu *ImplantUpdate) Mutation() *ImplantMutation {
	return iu.mutation
}

// ClearHeartbeats clears all "heartbeats" edges to the Heartbeat entity.
func (iu *ImplantUpdate) ClearHeartbeats() *ImplantUpdate {
	iu.mutation.ClearHeartbeats()
	return iu
}

// RemoveHeartbeatIDs removes the "heartbeats" edge to Heartbeat entities by IDs.
func (iu *ImplantUpdate) RemoveHeartbeatIDs(ids ...int) *ImplantUpdate {
	iu.mutation.RemoveHeartbeatIDs(ids...)
	return iu
}

// RemoveHeartbeats removes "heartbeats" edges to Heartbeat entities.
func (iu *ImplantUpdate) RemoveHeartbeats(h ...*Heartbeat) *ImplantUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return iu.RemoveHeartbeatIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (iu *ImplantUpdate) ClearTasks() *ImplantUpdate {
	iu.mutation.ClearTasks()
	return iu
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (iu *ImplantUpdate) RemoveTaskIDs(ids ...int) *ImplantUpdate {
	iu.mutation.RemoveTaskIDs(ids...)
	return iu
}

// RemoveTasks removes "tasks" edges to Task entities.
func (iu *ImplantUpdate) RemoveTasks(t ...*Task) *ImplantUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iu.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *ImplantUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(iu.hooks) == 0 {
		affected, err = iu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ImplantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iu.mutation = mutation
			affected, err = iu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iu.hooks) - 1; i >= 0; i-- {
			if iu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iu *ImplantUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *ImplantUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *ImplantUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *ImplantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   implant.Table,
			Columns: implant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: implant.FieldID,
			},
		},
	}
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implant.FieldUUID,
		})
	}
	if value, ok := iu.mutation.MachineID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implant.FieldMachineID,
		})
	}
	if value, ok := iu.mutation.Hostname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implant.FieldHostname,
		})
	}
	if value, ok := iu.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implant.FieldIP,
		})
	}
	if value, ok := iu.mutation.LastSeenAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: implant.FieldLastSeenAt,
		})
	}
	if iu.mutation.HeartbeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   implant.HeartbeatsTable,
			Columns: []string{implant.HeartbeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: heartbeat.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedHeartbeatsIDs(); len(nodes) > 0 && !iu.mutation.HeartbeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   implant.HeartbeatsTable,
			Columns: []string{implant.HeartbeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: heartbeat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.HeartbeatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   implant.HeartbeatsTable,
			Columns: []string{implant.HeartbeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: heartbeat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   implant.TasksTable,
			Columns: []string{implant.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedTasksIDs(); len(nodes) > 0 && !iu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   implant.TasksTable,
			Columns: []string{implant.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   implant.TasksTable,
			Columns: []string{implant.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{implant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ImplantUpdateOne is the builder for updating a single Implant entity.
type ImplantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImplantMutation
}

// SetUUID sets the "uuid" field.
func (iuo *ImplantUpdateOne) SetUUID(s string) *ImplantUpdateOne {
	iuo.mutation.SetUUID(s)
	return iuo
}

// SetMachineID sets the "machine_id" field.
func (iuo *ImplantUpdateOne) SetMachineID(s string) *ImplantUpdateOne {
	iuo.mutation.SetMachineID(s)
	return iuo
}

// SetHostname sets the "hostname" field.
func (iuo *ImplantUpdateOne) SetHostname(s string) *ImplantUpdateOne {
	iuo.mutation.SetHostname(s)
	return iuo
}

// SetIP sets the "ip" field.
func (iuo *ImplantUpdateOne) SetIP(s string) *ImplantUpdateOne {
	iuo.mutation.SetIP(s)
	return iuo
}

// SetLastSeenAt sets the "last_seen_at" field.
func (iuo *ImplantUpdateOne) SetLastSeenAt(t time.Time) *ImplantUpdateOne {
	iuo.mutation.SetLastSeenAt(t)
	return iuo
}

// SetNillableLastSeenAt sets the "last_seen_at" field if the given value is not nil.
func (iuo *ImplantUpdateOne) SetNillableLastSeenAt(t *time.Time) *ImplantUpdateOne {
	if t != nil {
		iuo.SetLastSeenAt(*t)
	}
	return iuo
}

// AddHeartbeatIDs adds the "heartbeats" edge to the Heartbeat entity by IDs.
func (iuo *ImplantUpdateOne) AddHeartbeatIDs(ids ...int) *ImplantUpdateOne {
	iuo.mutation.AddHeartbeatIDs(ids...)
	return iuo
}

// AddHeartbeats adds the "heartbeats" edges to the Heartbeat entity.
func (iuo *ImplantUpdateOne) AddHeartbeats(h ...*Heartbeat) *ImplantUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return iuo.AddHeartbeatIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (iuo *ImplantUpdateOne) AddTaskIDs(ids ...int) *ImplantUpdateOne {
	iuo.mutation.AddTaskIDs(ids...)
	return iuo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (iuo *ImplantUpdateOne) AddTasks(t ...*Task) *ImplantUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iuo.AddTaskIDs(ids...)
}

// Mutation returns the ImplantMutation object of the builder.
func (iuo *ImplantUpdateOne) Mutation() *ImplantMutation {
	return iuo.mutation
}

// ClearHeartbeats clears all "heartbeats" edges to the Heartbeat entity.
func (iuo *ImplantUpdateOne) ClearHeartbeats() *ImplantUpdateOne {
	iuo.mutation.ClearHeartbeats()
	return iuo
}

// RemoveHeartbeatIDs removes the "heartbeats" edge to Heartbeat entities by IDs.
func (iuo *ImplantUpdateOne) RemoveHeartbeatIDs(ids ...int) *ImplantUpdateOne {
	iuo.mutation.RemoveHeartbeatIDs(ids...)
	return iuo
}

// RemoveHeartbeats removes "heartbeats" edges to Heartbeat entities.
func (iuo *ImplantUpdateOne) RemoveHeartbeats(h ...*Heartbeat) *ImplantUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return iuo.RemoveHeartbeatIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (iuo *ImplantUpdateOne) ClearTasks() *ImplantUpdateOne {
	iuo.mutation.ClearTasks()
	return iuo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (iuo *ImplantUpdateOne) RemoveTaskIDs(ids ...int) *ImplantUpdateOne {
	iuo.mutation.RemoveTaskIDs(ids...)
	return iuo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (iuo *ImplantUpdateOne) RemoveTasks(t ...*Task) *ImplantUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return iuo.RemoveTaskIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *ImplantUpdateOne) Select(field string, fields ...string) *ImplantUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Implant entity.
func (iuo *ImplantUpdateOne) Save(ctx context.Context) (*Implant, error) {
	var (
		err  error
		node *Implant
	)
	if len(iuo.hooks) == 0 {
		node, err = iuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ImplantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iuo.mutation = mutation
			node, err = iuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iuo.hooks) - 1; i >= 0; i-- {
			if iuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *ImplantUpdateOne) SaveX(ctx context.Context) *Implant {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *ImplantUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *ImplantUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *ImplantUpdateOne) sqlSave(ctx context.Context) (_node *Implant, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   implant.Table,
			Columns: implant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: implant.FieldID,
			},
		},
	}
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Implant.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, implant.FieldID)
		for _, f := range fields {
			if !implant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != implant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implant.FieldUUID,
		})
	}
	if value, ok := iuo.mutation.MachineID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implant.FieldMachineID,
		})
	}
	if value, ok := iuo.mutation.Hostname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implant.FieldHostname,
		})
	}
	if value, ok := iuo.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: implant.FieldIP,
		})
	}
	if value, ok := iuo.mutation.LastSeenAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: implant.FieldLastSeenAt,
		})
	}
	if iuo.mutation.HeartbeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   implant.HeartbeatsTable,
			Columns: []string{implant.HeartbeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: heartbeat.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedHeartbeatsIDs(); len(nodes) > 0 && !iuo.mutation.HeartbeatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   implant.HeartbeatsTable,
			Columns: []string{implant.HeartbeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: heartbeat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.HeartbeatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   implant.HeartbeatsTable,
			Columns: []string{implant.HeartbeatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: heartbeat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   implant.TasksTable,
			Columns: []string{implant.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !iuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   implant.TasksTable,
			Columns: []string{implant.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   implant.TasksTable,
			Columns: []string{implant.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Implant{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{implant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
