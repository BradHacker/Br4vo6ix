// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/BradHacker/chungus/ent/heartbeat"
	"github.com/BradHacker/chungus/ent/implant"
	"github.com/BradHacker/chungus/ent/predicate"
)

// HeartbeatUpdate is the builder for updating Heartbeat entities.
type HeartbeatUpdate struct {
	config
	hooks    []Hook
	mutation *HeartbeatMutation
}

// Where appends a list predicates to the HeartbeatUpdate builder.
func (hu *HeartbeatUpdate) Where(ps ...predicate.Heartbeat) *HeartbeatUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetUUID sets the "uuid" field.
func (hu *HeartbeatUpdate) SetUUID(s string) *HeartbeatUpdate {
	hu.mutation.SetUUID(s)
	return hu
}

// SetHostname sets the "hostname" field.
func (hu *HeartbeatUpdate) SetHostname(s string) *HeartbeatUpdate {
	hu.mutation.SetHostname(s)
	return hu
}

// SetIP sets the "ip" field.
func (hu *HeartbeatUpdate) SetIP(s string) *HeartbeatUpdate {
	hu.mutation.SetIP(s)
	return hu
}

// SetPort sets the "port" field.
func (hu *HeartbeatUpdate) SetPort(i int) *HeartbeatUpdate {
	hu.mutation.ResetPort()
	hu.mutation.SetPort(i)
	return hu
}

// AddPort adds i to the "port" field.
func (hu *HeartbeatUpdate) AddPort(i int) *HeartbeatUpdate {
	hu.mutation.AddPort(i)
	return hu
}

// SetPid sets the "pid" field.
func (hu *HeartbeatUpdate) SetPid(i int) *HeartbeatUpdate {
	hu.mutation.ResetPid()
	hu.mutation.SetPid(i)
	return hu
}

// AddPid adds i to the "pid" field.
func (hu *HeartbeatUpdate) AddPid(i int) *HeartbeatUpdate {
	hu.mutation.AddPid(i)
	return hu
}

// SetCreatedAt sets the "created_at" field.
func (hu *HeartbeatUpdate) SetCreatedAt(t time.Time) *HeartbeatUpdate {
	hu.mutation.SetCreatedAt(t)
	return hu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hu *HeartbeatUpdate) SetNillableCreatedAt(t *time.Time) *HeartbeatUpdate {
	if t != nil {
		hu.SetCreatedAt(*t)
	}
	return hu
}

// SetImplantID sets the "implant" edge to the Implant entity by ID.
func (hu *HeartbeatUpdate) SetImplantID(id int) *HeartbeatUpdate {
	hu.mutation.SetImplantID(id)
	return hu
}

// SetImplant sets the "implant" edge to the Implant entity.
func (hu *HeartbeatUpdate) SetImplant(i *Implant) *HeartbeatUpdate {
	return hu.SetImplantID(i.ID)
}

// Mutation returns the HeartbeatMutation object of the builder.
func (hu *HeartbeatUpdate) Mutation() *HeartbeatMutation {
	return hu.mutation
}

// ClearImplant clears the "implant" edge to the Implant entity.
func (hu *HeartbeatUpdate) ClearImplant() *HeartbeatUpdate {
	hu.mutation.ClearImplant()
	return hu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HeartbeatUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(hu.hooks) == 0 {
		if err = hu.check(); err != nil {
			return 0, err
		}
		affected, err = hu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HeartbeatMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = hu.check(); err != nil {
				return 0, err
			}
			hu.mutation = mutation
			affected, err = hu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(hu.hooks) - 1; i >= 0; i-- {
			if hu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = hu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HeartbeatUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HeartbeatUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HeartbeatUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hu *HeartbeatUpdate) check() error {
	if _, ok := hu.mutation.ImplantID(); hu.mutation.ImplantCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"implant\"")
	}
	return nil
}

func (hu *HeartbeatUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   heartbeat.Table,
			Columns: heartbeat.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: heartbeat.FieldID,
			},
		},
	}
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: heartbeat.FieldUUID,
		})
	}
	if value, ok := hu.mutation.Hostname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: heartbeat.FieldHostname,
		})
	}
	if value, ok := hu.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: heartbeat.FieldIP,
		})
	}
	if value, ok := hu.mutation.Port(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: heartbeat.FieldPort,
		})
	}
	if value, ok := hu.mutation.AddedPort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: heartbeat.FieldPort,
		})
	}
	if value, ok := hu.mutation.Pid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: heartbeat.FieldPid,
		})
	}
	if value, ok := hu.mutation.AddedPid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: heartbeat.FieldPid,
		})
	}
	if value, ok := hu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: heartbeat.FieldCreatedAt,
		})
	}
	if hu.mutation.ImplantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   heartbeat.ImplantTable,
			Columns: []string{heartbeat.ImplantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.ImplantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   heartbeat.ImplantTable,
			Columns: []string{heartbeat.ImplantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{heartbeat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// HeartbeatUpdateOne is the builder for updating a single Heartbeat entity.
type HeartbeatUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HeartbeatMutation
}

// SetUUID sets the "uuid" field.
func (huo *HeartbeatUpdateOne) SetUUID(s string) *HeartbeatUpdateOne {
	huo.mutation.SetUUID(s)
	return huo
}

// SetHostname sets the "hostname" field.
func (huo *HeartbeatUpdateOne) SetHostname(s string) *HeartbeatUpdateOne {
	huo.mutation.SetHostname(s)
	return huo
}

// SetIP sets the "ip" field.
func (huo *HeartbeatUpdateOne) SetIP(s string) *HeartbeatUpdateOne {
	huo.mutation.SetIP(s)
	return huo
}

// SetPort sets the "port" field.
func (huo *HeartbeatUpdateOne) SetPort(i int) *HeartbeatUpdateOne {
	huo.mutation.ResetPort()
	huo.mutation.SetPort(i)
	return huo
}

// AddPort adds i to the "port" field.
func (huo *HeartbeatUpdateOne) AddPort(i int) *HeartbeatUpdateOne {
	huo.mutation.AddPort(i)
	return huo
}

// SetPid sets the "pid" field.
func (huo *HeartbeatUpdateOne) SetPid(i int) *HeartbeatUpdateOne {
	huo.mutation.ResetPid()
	huo.mutation.SetPid(i)
	return huo
}

// AddPid adds i to the "pid" field.
func (huo *HeartbeatUpdateOne) AddPid(i int) *HeartbeatUpdateOne {
	huo.mutation.AddPid(i)
	return huo
}

// SetCreatedAt sets the "created_at" field.
func (huo *HeartbeatUpdateOne) SetCreatedAt(t time.Time) *HeartbeatUpdateOne {
	huo.mutation.SetCreatedAt(t)
	return huo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (huo *HeartbeatUpdateOne) SetNillableCreatedAt(t *time.Time) *HeartbeatUpdateOne {
	if t != nil {
		huo.SetCreatedAt(*t)
	}
	return huo
}

// SetImplantID sets the "implant" edge to the Implant entity by ID.
func (huo *HeartbeatUpdateOne) SetImplantID(id int) *HeartbeatUpdateOne {
	huo.mutation.SetImplantID(id)
	return huo
}

// SetImplant sets the "implant" edge to the Implant entity.
func (huo *HeartbeatUpdateOne) SetImplant(i *Implant) *HeartbeatUpdateOne {
	return huo.SetImplantID(i.ID)
}

// Mutation returns the HeartbeatMutation object of the builder.
func (huo *HeartbeatUpdateOne) Mutation() *HeartbeatMutation {
	return huo.mutation
}

// ClearImplant clears the "implant" edge to the Implant entity.
func (huo *HeartbeatUpdateOne) ClearImplant() *HeartbeatUpdateOne {
	huo.mutation.ClearImplant()
	return huo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HeartbeatUpdateOne) Select(field string, fields ...string) *HeartbeatUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Heartbeat entity.
func (huo *HeartbeatUpdateOne) Save(ctx context.Context) (*Heartbeat, error) {
	var (
		err  error
		node *Heartbeat
	)
	if len(huo.hooks) == 0 {
		if err = huo.check(); err != nil {
			return nil, err
		}
		node, err = huo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HeartbeatMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = huo.check(); err != nil {
				return nil, err
			}
			huo.mutation = mutation
			node, err = huo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(huo.hooks) - 1; i >= 0; i-- {
			if huo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = huo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, huo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HeartbeatUpdateOne) SaveX(ctx context.Context) *Heartbeat {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HeartbeatUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HeartbeatUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (huo *HeartbeatUpdateOne) check() error {
	if _, ok := huo.mutation.ImplantID(); huo.mutation.ImplantCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"implant\"")
	}
	return nil
}

func (huo *HeartbeatUpdateOne) sqlSave(ctx context.Context) (_node *Heartbeat, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   heartbeat.Table,
			Columns: heartbeat.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: heartbeat.FieldID,
			},
		},
	}
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Heartbeat.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, heartbeat.FieldID)
		for _, f := range fields {
			if !heartbeat.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != heartbeat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: heartbeat.FieldUUID,
		})
	}
	if value, ok := huo.mutation.Hostname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: heartbeat.FieldHostname,
		})
	}
	if value, ok := huo.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: heartbeat.FieldIP,
		})
	}
	if value, ok := huo.mutation.Port(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: heartbeat.FieldPort,
		})
	}
	if value, ok := huo.mutation.AddedPort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: heartbeat.FieldPort,
		})
	}
	if value, ok := huo.mutation.Pid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: heartbeat.FieldPid,
		})
	}
	if value, ok := huo.mutation.AddedPid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: heartbeat.FieldPid,
		})
	}
	if value, ok := huo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: heartbeat.FieldCreatedAt,
		})
	}
	if huo.mutation.ImplantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   heartbeat.ImplantTable,
			Columns: []string{heartbeat.ImplantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.ImplantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   heartbeat.ImplantTable,
			Columns: []string{heartbeat.ImplantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: implant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Heartbeat{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{heartbeat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
