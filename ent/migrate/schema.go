// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// HeartbeatsColumns holds the columns for the "heartbeats" table.
	HeartbeatsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeString, Unique: true},
		{Name: "hostname", Type: field.TypeString},
		{Name: "ip", Type: field.TypeString},
		{Name: "port", Type: field.TypeInt},
		{Name: "pid", Type: field.TypeInt},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "heartbeat_implant", Type: field.TypeInt, Nullable: true},
	}
	// HeartbeatsTable holds the schema information for the "heartbeats" table.
	HeartbeatsTable = &schema.Table{
		Name:       "heartbeats",
		Columns:    HeartbeatsColumns,
		PrimaryKey: []*schema.Column{HeartbeatsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "heartbeats_implants_implant",
				Columns:    []*schema.Column{HeartbeatsColumns[7]},
				RefColumns: []*schema.Column{ImplantsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ImplantsColumns holds the columns for the "implants" table.
	ImplantsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeString, Unique: true},
		{Name: "machine_id", Type: field.TypeString},
		{Name: "hostname", Type: field.TypeString},
		{Name: "ip", Type: field.TypeString},
		{Name: "last_seen_at", Type: field.TypeTime},
	}
	// ImplantsTable holds the schema information for the "implants" table.
	ImplantsTable = &schema.Table{
		Name:       "implants",
		Columns:    ImplantsColumns,
		PrimaryKey: []*schema.Column{ImplantsColumns[0]},
	}
	// TasksColumns holds the columns for the "tasks" table.
	TasksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uuid", Type: field.TypeString, Unique: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"CMD", "SCRIPT"}},
		{Name: "payload", Type: field.TypeString},
		{Name: "stdout", Type: field.TypeString},
		{Name: "stderr", Type: field.TypeString},
		{Name: "has_run", Type: field.TypeBool, Default: false},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "task_implant", Type: field.TypeInt, Nullable: true},
	}
	// TasksTable holds the schema information for the "tasks" table.
	TasksTable = &schema.Table{
		Name:       "tasks",
		Columns:    TasksColumns,
		PrimaryKey: []*schema.Column{TasksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tasks_implants_implant",
				Columns:    []*schema.Column{TasksColumns[8]},
				RefColumns: []*schema.Column{ImplantsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		HeartbeatsTable,
		ImplantsTable,
		TasksTable,
	}
)

func init() {
	HeartbeatsTable.ForeignKeys[0].RefTable = ImplantsTable
	TasksTable.ForeignKeys[0].RefTable = ImplantsTable
}
