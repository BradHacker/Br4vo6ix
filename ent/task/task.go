// Code generated by entc, DO NOT EDIT.

package task

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

const (
	// Label holds the string label denoting the task type in the database.
	Label = "task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldPayload holds the string denoting the payload field in the database.
	FieldPayload = "payload"
	// FieldStdout holds the string denoting the stdout field in the database.
	FieldStdout = "stdout"
	// FieldStderr holds the string denoting the stderr field in the database.
	FieldStderr = "stderr"
	// FieldHasRun holds the string denoting the has_run field in the database.
	FieldHasRun = "has_run"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeImplant holds the string denoting the implant edge name in mutations.
	EdgeImplant = "implant"
	// Table holds the table name of the task in the database.
	Table = "tasks"
	// ImplantTable is the table that holds the implant relation/edge.
	ImplantTable = "tasks"
	// ImplantInverseTable is the table name for the Implant entity.
	// It exists in this package in order to avoid circular dependency with the "implant" package.
	ImplantInverseTable = "implants"
	// ImplantColumn is the table column denoting the implant relation/edge.
	ImplantColumn = "task_implant"
)

// Columns holds all SQL columns for task fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldType,
	FieldPayload,
	FieldStdout,
	FieldStderr,
	FieldHasRun,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tasks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"task_implant",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultHasRun holds the default value on creation for the "has_run" field.
	DefaultHasRun bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeCMD    Type = "CMD"
	TypeSCRIPT Type = "SCRIPT"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeCMD, TypeSCRIPT:
		return nil
	default:
		return fmt.Errorf("task: invalid enum value for type field: %q", _type)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (_type Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(_type.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (_type *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*_type = Type(str)
	if err := TypeValidator(*_type); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}
