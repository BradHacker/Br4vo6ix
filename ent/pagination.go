// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/BradHacker/chungus/ent/heartbeat"
	"github.com/BradHacker/chungus/ent/implant"
	"github.com/BradHacker/chungus/ent/task"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    int   `msgpack:"i"`
	Value Value `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func getCollectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	field := fc.Field

walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Name == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return getCollectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

// HeartbeatEdge is the edge representation of Heartbeat.
type HeartbeatEdge struct {
	Node   *Heartbeat `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// HeartbeatConnection is the connection containing edges to Heartbeat.
type HeartbeatConnection struct {
	Edges      []*HeartbeatEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

// HeartbeatPaginateOption enables pagination customization.
type HeartbeatPaginateOption func(*heartbeatPager) error

// WithHeartbeatOrder configures pagination ordering.
func WithHeartbeatOrder(order *HeartbeatOrder) HeartbeatPaginateOption {
	if order == nil {
		order = DefaultHeartbeatOrder
	}
	o := *order
	return func(pager *heartbeatPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultHeartbeatOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithHeartbeatFilter configures pagination filter.
func WithHeartbeatFilter(filter func(*HeartbeatQuery) (*HeartbeatQuery, error)) HeartbeatPaginateOption {
	return func(pager *heartbeatPager) error {
		if filter == nil {
			return errors.New("HeartbeatQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type heartbeatPager struct {
	order  *HeartbeatOrder
	filter func(*HeartbeatQuery) (*HeartbeatQuery, error)
}

func newHeartbeatPager(opts []HeartbeatPaginateOption) (*heartbeatPager, error) {
	pager := &heartbeatPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultHeartbeatOrder
	}
	return pager, nil
}

func (p *heartbeatPager) applyFilter(query *HeartbeatQuery) (*HeartbeatQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *heartbeatPager) toCursor(h *Heartbeat) Cursor {
	return p.order.Field.toCursor(h)
}

func (p *heartbeatPager) applyCursors(query *HeartbeatQuery, after, before *Cursor) *HeartbeatQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultHeartbeatOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *heartbeatPager) applyOrder(query *HeartbeatQuery, reverse bool) *HeartbeatQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultHeartbeatOrder.Field {
		query = query.Order(direction.orderFunc(DefaultHeartbeatOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Heartbeat.
func (h *HeartbeatQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...HeartbeatPaginateOption,
) (*HeartbeatConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newHeartbeatPager(opts)
	if err != nil {
		return nil, err
	}

	if h, err = pager.applyFilter(h); err != nil {
		return nil, err
	}

	conn := &HeartbeatConnection{Edges: []*HeartbeatEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := h.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := h.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	h = pager.applyCursors(h, after, before)
	h = pager.applyOrder(h, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		h = h.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		h = h.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := h.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Heartbeat
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Heartbeat {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Heartbeat {
			return nodes[i]
		}
	}

	conn.Edges = make([]*HeartbeatEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &HeartbeatEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// HeartbeatOrderField defines the ordering field of Heartbeat.
type HeartbeatOrderField struct {
	field    string
	toCursor func(*Heartbeat) Cursor
}

// HeartbeatOrder defines the ordering of Heartbeat.
type HeartbeatOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *HeartbeatOrderField `json:"field"`
}

// DefaultHeartbeatOrder is the default ordering of Heartbeat.
var DefaultHeartbeatOrder = &HeartbeatOrder{
	Direction: OrderDirectionAsc,
	Field: &HeartbeatOrderField{
		field: heartbeat.FieldID,
		toCursor: func(h *Heartbeat) Cursor {
			return Cursor{ID: h.ID}
		},
	},
}

// ToEdge converts Heartbeat into HeartbeatEdge.
func (h *Heartbeat) ToEdge(order *HeartbeatOrder) *HeartbeatEdge {
	if order == nil {
		order = DefaultHeartbeatOrder
	}
	return &HeartbeatEdge{
		Node:   h,
		Cursor: order.Field.toCursor(h),
	}
}

// ImplantEdge is the edge representation of Implant.
type ImplantEdge struct {
	Node   *Implant `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// ImplantConnection is the connection containing edges to Implant.
type ImplantConnection struct {
	Edges      []*ImplantEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

// ImplantPaginateOption enables pagination customization.
type ImplantPaginateOption func(*implantPager) error

// WithImplantOrder configures pagination ordering.
func WithImplantOrder(order *ImplantOrder) ImplantPaginateOption {
	if order == nil {
		order = DefaultImplantOrder
	}
	o := *order
	return func(pager *implantPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultImplantOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithImplantFilter configures pagination filter.
func WithImplantFilter(filter func(*ImplantQuery) (*ImplantQuery, error)) ImplantPaginateOption {
	return func(pager *implantPager) error {
		if filter == nil {
			return errors.New("ImplantQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type implantPager struct {
	order  *ImplantOrder
	filter func(*ImplantQuery) (*ImplantQuery, error)
}

func newImplantPager(opts []ImplantPaginateOption) (*implantPager, error) {
	pager := &implantPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultImplantOrder
	}
	return pager, nil
}

func (p *implantPager) applyFilter(query *ImplantQuery) (*ImplantQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *implantPager) toCursor(i *Implant) Cursor {
	return p.order.Field.toCursor(i)
}

func (p *implantPager) applyCursors(query *ImplantQuery, after, before *Cursor) *ImplantQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultImplantOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *implantPager) applyOrder(query *ImplantQuery, reverse bool) *ImplantQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultImplantOrder.Field {
		query = query.Order(direction.orderFunc(DefaultImplantOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Implant.
func (i *ImplantQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ImplantPaginateOption,
) (*ImplantConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newImplantPager(opts)
	if err != nil {
		return nil, err
	}

	if i, err = pager.applyFilter(i); err != nil {
		return nil, err
	}

	conn := &ImplantConnection{Edges: []*ImplantEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := i.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := i.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	i = pager.applyCursors(i, after, before)
	i = pager.applyOrder(i, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		i = i.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		i = i.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := i.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Implant
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Implant {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Implant {
			return nodes[i]
		}
	}

	conn.Edges = make([]*ImplantEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &ImplantEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// ImplantOrderField defines the ordering field of Implant.
type ImplantOrderField struct {
	field    string
	toCursor func(*Implant) Cursor
}

// ImplantOrder defines the ordering of Implant.
type ImplantOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *ImplantOrderField `json:"field"`
}

// DefaultImplantOrder is the default ordering of Implant.
var DefaultImplantOrder = &ImplantOrder{
	Direction: OrderDirectionAsc,
	Field: &ImplantOrderField{
		field: implant.FieldID,
		toCursor: func(i *Implant) Cursor {
			return Cursor{ID: i.ID}
		},
	},
}

// ToEdge converts Implant into ImplantEdge.
func (i *Implant) ToEdge(order *ImplantOrder) *ImplantEdge {
	if order == nil {
		order = DefaultImplantOrder
	}
	return &ImplantEdge{
		Node:   i,
		Cursor: order.Field.toCursor(i),
	}
}

// TaskEdge is the edge representation of Task.
type TaskEdge struct {
	Node   *Task  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// TaskConnection is the connection containing edges to Task.
type TaskConnection struct {
	Edges      []*TaskEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

// TaskPaginateOption enables pagination customization.
type TaskPaginateOption func(*taskPager) error

// WithTaskOrder configures pagination ordering.
func WithTaskOrder(order *TaskOrder) TaskPaginateOption {
	if order == nil {
		order = DefaultTaskOrder
	}
	o := *order
	return func(pager *taskPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTaskOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTaskFilter configures pagination filter.
func WithTaskFilter(filter func(*TaskQuery) (*TaskQuery, error)) TaskPaginateOption {
	return func(pager *taskPager) error {
		if filter == nil {
			return errors.New("TaskQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type taskPager struct {
	order  *TaskOrder
	filter func(*TaskQuery) (*TaskQuery, error)
}

func newTaskPager(opts []TaskPaginateOption) (*taskPager, error) {
	pager := &taskPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTaskOrder
	}
	return pager, nil
}

func (p *taskPager) applyFilter(query *TaskQuery) (*TaskQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *taskPager) toCursor(t *Task) Cursor {
	return p.order.Field.toCursor(t)
}

func (p *taskPager) applyCursors(query *TaskQuery, after, before *Cursor) *TaskQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTaskOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *taskPager) applyOrder(query *TaskQuery, reverse bool) *TaskQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTaskOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTaskOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to Task.
func (t *TaskQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TaskPaginateOption,
) (*TaskConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTaskPager(opts)
	if err != nil {
		return nil, err
	}

	if t, err = pager.applyFilter(t); err != nil {
		return nil, err
	}

	conn := &TaskConnection{Edges: []*TaskEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := t.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := t.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	t = pager.applyCursors(t, after, before)
	t = pager.applyOrder(t, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		t = t.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		t = t.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := t.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *Task
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Task {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Task {
			return nodes[i]
		}
	}

	conn.Edges = make([]*TaskEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &TaskEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// TaskOrderField defines the ordering field of Task.
type TaskOrderField struct {
	field    string
	toCursor func(*Task) Cursor
}

// TaskOrder defines the ordering of Task.
type TaskOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *TaskOrderField `json:"field"`
}

// DefaultTaskOrder is the default ordering of Task.
var DefaultTaskOrder = &TaskOrder{
	Direction: OrderDirectionAsc,
	Field: &TaskOrderField{
		field: task.FieldID,
		toCursor: func(t *Task) Cursor {
			return Cursor{ID: t.ID}
		},
	},
}

// ToEdge converts Task into TaskEdge.
func (t *Task) ToEdge(order *TaskOrder) *TaskEdge {
	if order == nil {
		order = DefaultTaskOrder
	}
	return &TaskEdge{
		Node:   t,
		Cursor: order.Field.toCursor(t),
	}
}
